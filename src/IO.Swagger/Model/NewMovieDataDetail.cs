/* 
 * IMDb-API
 *
 * The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>
 *
 * OpenAPI spec version: 1.8.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.TVSeries.Client.SwaggerDateConverter;

namespace IO.TVSeries.Model
{
    /// <summary>
    /// NewMovieDataDetail
    /// </summary>
    [DataContract]
        public partial class NewMovieDataDetail :  IEquatable<NewMovieDataDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewMovieDataDetail" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="title">title.</param>
        /// <param name="fullTitle">fullTitle.</param>
        /// <param name="year">year.</param>
        /// <param name="releaseState">releaseState.</param>
        /// <param name="image">image.</param>
        /// <param name="runtimeMins">runtimeMins.</param>
        /// <param name="runtimeStr">runtimeStr.</param>
        /// <param name="plot">plot.</param>
        /// <param name="contentRating">contentRating.</param>
        /// <param name="imDbRating">imDbRating.</param>
        /// <param name="imDbRatingCount">imDbRatingCount.</param>
        /// <param name="metacriticRating">metacriticRating.</param>
        /// <param name="genres">genres.</param>
        /// <param name="genreList">genreList.</param>
        /// <param name="directors">directors.</param>
        /// <param name="directorList">directorList.</param>
        /// <param name="stars">stars.</param>
        /// <param name="starList">starList.</param>
        public NewMovieDataDetail(string id = default(string), string title = default(string), string fullTitle = default(string), string year = default(string), string releaseState = default(string), string image = default(string), string runtimeMins = default(string), string runtimeStr = default(string), string plot = default(string), string contentRating = default(string), string imDbRating = default(string), string imDbRatingCount = default(string), string metacriticRating = default(string), string genres = default(string), List<KeyValueItem> genreList = default(List<KeyValueItem>), string directors = default(string), List<StarShort> directorList = default(List<StarShort>), string stars = default(string), List<StarShort> starList = default(List<StarShort>))
        {
            this.Id = id;
            this.Title = title;
            this.FullTitle = fullTitle;
            this.Year = year;
            this.ReleaseState = releaseState;
            this.Image = image;
            this.RuntimeMins = runtimeMins;
            this.RuntimeStr = runtimeStr;
            this.Plot = plot;
            this.ContentRating = contentRating;
            this.ImDbRating = imDbRating;
            this.ImDbRatingCount = imDbRatingCount;
            this.MetacriticRating = metacriticRating;
            this.Genres = genres;
            this.GenreList = genreList;
            this.Directors = directors;
            this.DirectorList = directorList;
            this.Stars = stars;
            this.StarList = starList;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets FullTitle
        /// </summary>
        [DataMember(Name="fullTitle", EmitDefaultValue=false)]
        public string FullTitle { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public string Year { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseState
        /// </summary>
        [DataMember(Name="releaseState", EmitDefaultValue=false)]
        public string ReleaseState { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets RuntimeMins
        /// </summary>
        [DataMember(Name="runtimeMins", EmitDefaultValue=false)]
        public string RuntimeMins { get; set; }

        /// <summary>
        /// Gets or Sets RuntimeStr
        /// </summary>
        [DataMember(Name="runtimeStr", EmitDefaultValue=false)]
        public string RuntimeStr { get; set; }

        /// <summary>
        /// Gets or Sets Plot
        /// </summary>
        [DataMember(Name="plot", EmitDefaultValue=false)]
        public string Plot { get; set; }

        /// <summary>
        /// Gets or Sets ContentRating
        /// </summary>
        [DataMember(Name="contentRating", EmitDefaultValue=false)]
        public string ContentRating { get; set; }

        /// <summary>
        /// Gets or Sets ImDbRating
        /// </summary>
        [DataMember(Name="imDbRating", EmitDefaultValue=false)]
        public string ImDbRating { get; set; }

        /// <summary>
        /// Gets or Sets ImDbRatingCount
        /// </summary>
        [DataMember(Name="imDbRatingCount", EmitDefaultValue=false)]
        public string ImDbRatingCount { get; set; }

        /// <summary>
        /// Gets or Sets MetacriticRating
        /// </summary>
        [DataMember(Name="metacriticRating", EmitDefaultValue=false)]
        public string MetacriticRating { get; set; }

        /// <summary>
        /// Gets or Sets Genres
        /// </summary>
        [DataMember(Name="genres", EmitDefaultValue=false)]
        public string Genres { get; set; }

        /// <summary>
        /// Gets or Sets GenreList
        /// </summary>
        [DataMember(Name="genreList", EmitDefaultValue=false)]
        public List<KeyValueItem> GenreList { get; set; }

        /// <summary>
        /// Gets or Sets Directors
        /// </summary>
        [DataMember(Name="directors", EmitDefaultValue=false)]
        public string Directors { get; set; }

        /// <summary>
        /// Gets or Sets DirectorList
        /// </summary>
        [DataMember(Name="directorList", EmitDefaultValue=false)]
        public List<StarShort> DirectorList { get; set; }

        /// <summary>
        /// Gets or Sets Stars
        /// </summary>
        [DataMember(Name="stars", EmitDefaultValue=false)]
        public string Stars { get; set; }

        /// <summary>
        /// Gets or Sets StarList
        /// </summary>
        [DataMember(Name="starList", EmitDefaultValue=false)]
        public List<StarShort> StarList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewMovieDataDetail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  FullTitle: ").Append(FullTitle).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  ReleaseState: ").Append(ReleaseState).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  RuntimeMins: ").Append(RuntimeMins).Append("\n");
            sb.Append("  RuntimeStr: ").Append(RuntimeStr).Append("\n");
            sb.Append("  Plot: ").Append(Plot).Append("\n");
            sb.Append("  ContentRating: ").Append(ContentRating).Append("\n");
            sb.Append("  ImDbRating: ").Append(ImDbRating).Append("\n");
            sb.Append("  ImDbRatingCount: ").Append(ImDbRatingCount).Append("\n");
            sb.Append("  MetacriticRating: ").Append(MetacriticRating).Append("\n");
            sb.Append("  Genres: ").Append(Genres).Append("\n");
            sb.Append("  GenreList: ").Append(GenreList).Append("\n");
            sb.Append("  Directors: ").Append(Directors).Append("\n");
            sb.Append("  DirectorList: ").Append(DirectorList).Append("\n");
            sb.Append("  Stars: ").Append(Stars).Append("\n");
            sb.Append("  StarList: ").Append(StarList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewMovieDataDetail);
        }

        /// <summary>
        /// Returns true if NewMovieDataDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of NewMovieDataDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewMovieDataDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.FullTitle == input.FullTitle ||
                    (this.FullTitle != null &&
                    this.FullTitle.Equals(input.FullTitle))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.ReleaseState == input.ReleaseState ||
                    (this.ReleaseState != null &&
                    this.ReleaseState.Equals(input.ReleaseState))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.RuntimeMins == input.RuntimeMins ||
                    (this.RuntimeMins != null &&
                    this.RuntimeMins.Equals(input.RuntimeMins))
                ) && 
                (
                    this.RuntimeStr == input.RuntimeStr ||
                    (this.RuntimeStr != null &&
                    this.RuntimeStr.Equals(input.RuntimeStr))
                ) && 
                (
                    this.Plot == input.Plot ||
                    (this.Plot != null &&
                    this.Plot.Equals(input.Plot))
                ) && 
                (
                    this.ContentRating == input.ContentRating ||
                    (this.ContentRating != null &&
                    this.ContentRating.Equals(input.ContentRating))
                ) && 
                (
                    this.ImDbRating == input.ImDbRating ||
                    (this.ImDbRating != null &&
                    this.ImDbRating.Equals(input.ImDbRating))
                ) && 
                (
                    this.ImDbRatingCount == input.ImDbRatingCount ||
                    (this.ImDbRatingCount != null &&
                    this.ImDbRatingCount.Equals(input.ImDbRatingCount))
                ) && 
                (
                    this.MetacriticRating == input.MetacriticRating ||
                    (this.MetacriticRating != null &&
                    this.MetacriticRating.Equals(input.MetacriticRating))
                ) && 
                (
                    this.Genres == input.Genres ||
                    (this.Genres != null &&
                    this.Genres.Equals(input.Genres))
                ) && 
                (
                    this.GenreList == input.GenreList ||
                    this.GenreList != null &&
                    input.GenreList != null &&
                    this.GenreList.SequenceEqual(input.GenreList)
                ) && 
                (
                    this.Directors == input.Directors ||
                    (this.Directors != null &&
                    this.Directors.Equals(input.Directors))
                ) && 
                (
                    this.DirectorList == input.DirectorList ||
                    this.DirectorList != null &&
                    input.DirectorList != null &&
                    this.DirectorList.SequenceEqual(input.DirectorList)
                ) && 
                (
                    this.Stars == input.Stars ||
                    (this.Stars != null &&
                    this.Stars.Equals(input.Stars))
                ) && 
                (
                    this.StarList == input.StarList ||
                    this.StarList != null &&
                    input.StarList != null &&
                    this.StarList.SequenceEqual(input.StarList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.FullTitle != null)
                    hashCode = hashCode * 59 + this.FullTitle.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.ReleaseState != null)
                    hashCode = hashCode * 59 + this.ReleaseState.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.RuntimeMins != null)
                    hashCode = hashCode * 59 + this.RuntimeMins.GetHashCode();
                if (this.RuntimeStr != null)
                    hashCode = hashCode * 59 + this.RuntimeStr.GetHashCode();
                if (this.Plot != null)
                    hashCode = hashCode * 59 + this.Plot.GetHashCode();
                if (this.ContentRating != null)
                    hashCode = hashCode * 59 + this.ContentRating.GetHashCode();
                if (this.ImDbRating != null)
                    hashCode = hashCode * 59 + this.ImDbRating.GetHashCode();
                if (this.ImDbRatingCount != null)
                    hashCode = hashCode * 59 + this.ImDbRatingCount.GetHashCode();
                if (this.MetacriticRating != null)
                    hashCode = hashCode * 59 + this.MetacriticRating.GetHashCode();
                if (this.Genres != null)
                    hashCode = hashCode * 59 + this.Genres.GetHashCode();
                if (this.GenreList != null)
                    hashCode = hashCode * 59 + this.GenreList.GetHashCode();
                if (this.Directors != null)
                    hashCode = hashCode * 59 + this.Directors.GetHashCode();
                if (this.DirectorList != null)
                    hashCode = hashCode * 59 + this.DirectorList.GetHashCode();
                if (this.Stars != null)
                    hashCode = hashCode * 59 + this.Stars.GetHashCode();
                if (this.StarList != null)
                    hashCode = hashCode * 59 + this.StarList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
