/* 
 * IMDb-API
 *
 * The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>
 *
 * OpenAPI spec version: 1.8.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.TVSeries.Client.SwaggerDateConverter;

namespace IO.TVSeries.Model
{
    /// <summary>
    /// TvSeriesInfo
    /// </summary>
    [DataContract]
        public partial class TvSeriesInfo :  IEquatable<TvSeriesInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TvSeriesInfo" /> class.
        /// </summary>
        /// <param name="yearEnd">yearEnd.</param>
        /// <param name="creators">creators.</param>
        /// <param name="creatorList">creatorList.</param>
        /// <param name="seasons">seasons.</param>
        public TvSeriesInfo(string yearEnd = default(string), string creators = default(string), List<StarShort> creatorList = default(List<StarShort>), List<string> seasons = default(List<string>))
        {
            this.YearEnd = yearEnd;
            this.Creators = creators;
            this.CreatorList = creatorList;
            this.Seasons = seasons;
        }
        
        /// <summary>
        /// Gets or Sets YearEnd
        /// </summary>
        [DataMember(Name="yearEnd", EmitDefaultValue=false)]
        public string YearEnd { get; set; }

        /// <summary>
        /// Gets or Sets Creators
        /// </summary>
        [DataMember(Name="creators", EmitDefaultValue=false)]
        public string Creators { get; set; }

        /// <summary>
        /// Gets or Sets CreatorList
        /// </summary>
        [DataMember(Name="creatorList", EmitDefaultValue=false)]
        public List<StarShort> CreatorList { get; set; }

        /// <summary>
        /// Gets or Sets Seasons
        /// </summary>
        [DataMember(Name="seasons", EmitDefaultValue=false)]
        public List<string> Seasons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TvSeriesInfo {\n");
            sb.Append("  YearEnd: ").Append(YearEnd).Append("\n");
            sb.Append("  Creators: ").Append(Creators).Append("\n");
            sb.Append("  CreatorList: ").Append(CreatorList).Append("\n");
            sb.Append("  Seasons: ").Append(Seasons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TvSeriesInfo);
        }

        /// <summary>
        /// Returns true if TvSeriesInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TvSeriesInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TvSeriesInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.YearEnd == input.YearEnd ||
                    (this.YearEnd != null &&
                    this.YearEnd.Equals(input.YearEnd))
                ) && 
                (
                    this.Creators == input.Creators ||
                    (this.Creators != null &&
                    this.Creators.Equals(input.Creators))
                ) && 
                (
                    this.CreatorList == input.CreatorList ||
                    this.CreatorList != null &&
                    input.CreatorList != null &&
                    this.CreatorList.SequenceEqual(input.CreatorList)
                ) && 
                (
                    this.Seasons == input.Seasons ||
                    this.Seasons != null &&
                    input.Seasons != null &&
                    this.Seasons.SequenceEqual(input.Seasons)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.YearEnd != null)
                    hashCode = hashCode * 59 + this.YearEnd.GetHashCode();
                if (this.Creators != null)
                    hashCode = hashCode * 59 + this.Creators.GetHashCode();
                if (this.CreatorList != null)
                    hashCode = hashCode * 59 + this.CreatorList.GetHashCode();
                if (this.Seasons != null)
                    hashCode = hashCode * 59 + this.Seasons.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
