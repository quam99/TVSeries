/* 
 * IMDb-API
 *
 * The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>
 *
 * OpenAPI spec version: 1.8.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BoxOfficeAllTimeDataDetail
    /// </summary>
    [DataContract]
        public partial class BoxOfficeAllTimeDataDetail :  IEquatable<BoxOfficeAllTimeDataDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxOfficeAllTimeDataDetail" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="rank">rank.</param>
        /// <param name="title">title.</param>
        /// <param name="worldwideLifetimeGross">worldwideLifetimeGross.</param>
        /// <param name="domesticLifetimeGross">domesticLifetimeGross.</param>
        /// <param name="domestic">domestic.</param>
        /// <param name="foreignLifetimeGross">foreignLifetimeGross.</param>
        /// <param name="foreign">foreign.</param>
        /// <param name="year">year.</param>
        public BoxOfficeAllTimeDataDetail(string id = default(string), string rank = default(string), string title = default(string), string worldwideLifetimeGross = default(string), string domesticLifetimeGross = default(string), string domestic = default(string), string foreignLifetimeGross = default(string), string foreign = default(string), string year = default(string))
        {
            this.Id = id;
            this.Rank = rank;
            this.Title = title;
            this.WorldwideLifetimeGross = worldwideLifetimeGross;
            this.DomesticLifetimeGross = domesticLifetimeGross;
            this.Domestic = domestic;
            this.ForeignLifetimeGross = foreignLifetimeGross;
            this.Foreign = foreign;
            this.Year = year;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public string Rank { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets WorldwideLifetimeGross
        /// </summary>
        [DataMember(Name="worldwideLifetimeGross", EmitDefaultValue=false)]
        public string WorldwideLifetimeGross { get; set; }

        /// <summary>
        /// Gets or Sets DomesticLifetimeGross
        /// </summary>
        [DataMember(Name="domesticLifetimeGross", EmitDefaultValue=false)]
        public string DomesticLifetimeGross { get; set; }

        /// <summary>
        /// Gets or Sets Domestic
        /// </summary>
        [DataMember(Name="domestic", EmitDefaultValue=false)]
        public string Domestic { get; set; }

        /// <summary>
        /// Gets or Sets ForeignLifetimeGross
        /// </summary>
        [DataMember(Name="foreignLifetimeGross", EmitDefaultValue=false)]
        public string ForeignLifetimeGross { get; set; }

        /// <summary>
        /// Gets or Sets Foreign
        /// </summary>
        [DataMember(Name="foreign", EmitDefaultValue=false)]
        public string Foreign { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public string Year { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoxOfficeAllTimeDataDetail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  WorldwideLifetimeGross: ").Append(WorldwideLifetimeGross).Append("\n");
            sb.Append("  DomesticLifetimeGross: ").Append(DomesticLifetimeGross).Append("\n");
            sb.Append("  Domestic: ").Append(Domestic).Append("\n");
            sb.Append("  ForeignLifetimeGross: ").Append(ForeignLifetimeGross).Append("\n");
            sb.Append("  Foreign: ").Append(Foreign).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoxOfficeAllTimeDataDetail);
        }

        /// <summary>
        /// Returns true if BoxOfficeAllTimeDataDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of BoxOfficeAllTimeDataDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoxOfficeAllTimeDataDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.WorldwideLifetimeGross == input.WorldwideLifetimeGross ||
                    (this.WorldwideLifetimeGross != null &&
                    this.WorldwideLifetimeGross.Equals(input.WorldwideLifetimeGross))
                ) && 
                (
                    this.DomesticLifetimeGross == input.DomesticLifetimeGross ||
                    (this.DomesticLifetimeGross != null &&
                    this.DomesticLifetimeGross.Equals(input.DomesticLifetimeGross))
                ) && 
                (
                    this.Domestic == input.Domestic ||
                    (this.Domestic != null &&
                    this.Domestic.Equals(input.Domestic))
                ) && 
                (
                    this.ForeignLifetimeGross == input.ForeignLifetimeGross ||
                    (this.ForeignLifetimeGross != null &&
                    this.ForeignLifetimeGross.Equals(input.ForeignLifetimeGross))
                ) && 
                (
                    this.Foreign == input.Foreign ||
                    (this.Foreign != null &&
                    this.Foreign.Equals(input.Foreign))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.WorldwideLifetimeGross != null)
                    hashCode = hashCode * 59 + this.WorldwideLifetimeGross.GetHashCode();
                if (this.DomesticLifetimeGross != null)
                    hashCode = hashCode * 59 + this.DomesticLifetimeGross.GetHashCode();
                if (this.Domestic != null)
                    hashCode = hashCode * 59 + this.Domestic.GetHashCode();
                if (this.ForeignLifetimeGross != null)
                    hashCode = hashCode * 59 + this.ForeignLifetimeGross.GetHashCode();
                if (this.Foreign != null)
                    hashCode = hashCode * 59 + this.Foreign.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
