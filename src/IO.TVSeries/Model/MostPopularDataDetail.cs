/* 
 * IMDb-API
 *
 * The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>
 *
 * OpenAPI spec version: 1.8.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MostPopularDataDetail
    /// </summary>
    [DataContract]
        public partial class MostPopularDataDetail :  IEquatable<MostPopularDataDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MostPopularDataDetail" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="rank">rank.</param>
        /// <param name="rankUpDown">rankUpDown.</param>
        /// <param name="title">title.</param>
        /// <param name="fullTitle">fullTitle.</param>
        /// <param name="year">year.</param>
        /// <param name="image">image.</param>
        /// <param name="crew">crew.</param>
        /// <param name="imDbRating">imDbRating.</param>
        /// <param name="imDbRatingCount">imDbRatingCount.</param>
        public MostPopularDataDetail(string id = default(string), string rank = default(string), string rankUpDown = default(string), string title = default(string), string fullTitle = default(string), string year = default(string), string image = default(string), string crew = default(string), string imDbRating = default(string), string imDbRatingCount = default(string))
        {
            this.Id = id;
            this.Rank = rank;
            this.RankUpDown = rankUpDown;
            this.Title = title;
            this.FullTitle = fullTitle;
            this.Year = year;
            this.Image = image;
            this.Crew = crew;
            this.ImDbRating = imDbRating;
            this.ImDbRatingCount = imDbRatingCount;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public string Rank { get; set; }

        /// <summary>
        /// Gets or Sets RankUpDown
        /// </summary>
        [DataMember(Name="rankUpDown", EmitDefaultValue=false)]
        public string RankUpDown { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets FullTitle
        /// </summary>
        [DataMember(Name="fullTitle", EmitDefaultValue=false)]
        public string FullTitle { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public string Year { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets Crew
        /// </summary>
        [DataMember(Name="crew", EmitDefaultValue=false)]
        public string Crew { get; set; }

        /// <summary>
        /// Gets or Sets ImDbRating
        /// </summary>
        [DataMember(Name="imDbRating", EmitDefaultValue=false)]
        public string ImDbRating { get; set; }

        /// <summary>
        /// Gets or Sets ImDbRatingCount
        /// </summary>
        [DataMember(Name="imDbRatingCount", EmitDefaultValue=false)]
        public string ImDbRatingCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MostPopularDataDetail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  RankUpDown: ").Append(RankUpDown).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  FullTitle: ").Append(FullTitle).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Crew: ").Append(Crew).Append("\n");
            sb.Append("  ImDbRating: ").Append(ImDbRating).Append("\n");
            sb.Append("  ImDbRatingCount: ").Append(ImDbRatingCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MostPopularDataDetail);
        }

        /// <summary>
        /// Returns true if MostPopularDataDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of MostPopularDataDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MostPopularDataDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.RankUpDown == input.RankUpDown ||
                    (this.RankUpDown != null &&
                    this.RankUpDown.Equals(input.RankUpDown))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.FullTitle == input.FullTitle ||
                    (this.FullTitle != null &&
                    this.FullTitle.Equals(input.FullTitle))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Crew == input.Crew ||
                    (this.Crew != null &&
                    this.Crew.Equals(input.Crew))
                ) && 
                (
                    this.ImDbRating == input.ImDbRating ||
                    (this.ImDbRating != null &&
                    this.ImDbRating.Equals(input.ImDbRating))
                ) && 
                (
                    this.ImDbRatingCount == input.ImDbRatingCount ||
                    (this.ImDbRatingCount != null &&
                    this.ImDbRatingCount.Equals(input.ImDbRatingCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                if (this.RankUpDown != null)
                    hashCode = hashCode * 59 + this.RankUpDown.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.FullTitle != null)
                    hashCode = hashCode * 59 + this.FullTitle.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Crew != null)
                    hashCode = hashCode * 59 + this.Crew.GetHashCode();
                if (this.ImDbRating != null)
                    hashCode = hashCode * 59 + this.ImDbRating.GetHashCode();
                if (this.ImDbRatingCount != null)
                    hashCode = hashCode * 59 + this.ImDbRatingCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
