/* 
 * IMDb-API
 *
 * The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>
 *
 * OpenAPI spec version: 1.8.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserRatingData
    /// </summary>
    [DataContract]
        public partial class UserRatingData :  IEquatable<UserRatingData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRatingData" /> class.
        /// </summary>
        /// <param name="imDbId">imDbId.</param>
        /// <param name="title">title.</param>
        /// <param name="fullTitle">fullTitle.</param>
        /// <param name="type">type.</param>
        /// <param name="year">year.</param>
        /// <param name="totalRating">totalRating.</param>
        /// <param name="totalRatingVotes">totalRatingVotes.</param>
        /// <param name="ratings">ratings.</param>
        /// <param name="demographicAll">demographicAll.</param>
        /// <param name="demographicMales">demographicMales.</param>
        /// <param name="demographicFemales">demographicFemales.</param>
        /// <param name="top1000Voters">top1000Voters.</param>
        /// <param name="usUsers">usUsers.</param>
        /// <param name="nonUSUsers">nonUSUsers.</param>
        /// <param name="errorMessage">errorMessage.</param>
        public UserRatingData(string imDbId = default(string), string title = default(string), string fullTitle = default(string), string type = default(string), string year = default(string), string totalRating = default(string), string totalRatingVotes = default(string), List<UserRatingDataDetail> ratings = default(List<UserRatingDataDetail>), UserRatingDataDemographic demographicAll = default(UserRatingDataDemographic), UserRatingDataDemographic demographicMales = default(UserRatingDataDemographic), UserRatingDataDemographic demographicFemales = default(UserRatingDataDemographic), UserRatingDataDemographicDetail top1000Voters = default(UserRatingDataDemographicDetail), UserRatingDataDemographicDetail usUsers = default(UserRatingDataDemographicDetail), UserRatingDataDemographicDetail nonUSUsers = default(UserRatingDataDemographicDetail), string errorMessage = default(string))
        {
            this.ImDbId = imDbId;
            this.Title = title;
            this.FullTitle = fullTitle;
            this.Type = type;
            this.Year = year;
            this.TotalRating = totalRating;
            this.TotalRatingVotes = totalRatingVotes;
            this.Ratings = ratings;
            this.DemographicAll = demographicAll;
            this.DemographicMales = demographicMales;
            this.DemographicFemales = demographicFemales;
            this.Top1000Voters = top1000Voters;
            this.UsUsers = usUsers;
            this.NonUSUsers = nonUSUsers;
            this.ErrorMessage = errorMessage;
        }
        
        /// <summary>
        /// Gets or Sets ImDbId
        /// </summary>
        [DataMember(Name="imDbId", EmitDefaultValue=false)]
        public string ImDbId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets FullTitle
        /// </summary>
        [DataMember(Name="fullTitle", EmitDefaultValue=false)]
        public string FullTitle { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public string Year { get; set; }

        /// <summary>
        /// Gets or Sets TotalRating
        /// </summary>
        [DataMember(Name="totalRating", EmitDefaultValue=false)]
        public string TotalRating { get; set; }

        /// <summary>
        /// Gets or Sets TotalRatingVotes
        /// </summary>
        [DataMember(Name="totalRatingVotes", EmitDefaultValue=false)]
        public string TotalRatingVotes { get; set; }

        /// <summary>
        /// Gets or Sets Ratings
        /// </summary>
        [DataMember(Name="ratings", EmitDefaultValue=false)]
        public List<UserRatingDataDetail> Ratings { get; set; }

        /// <summary>
        /// Gets or Sets DemographicAll
        /// </summary>
        [DataMember(Name="demographicAll", EmitDefaultValue=false)]
        public UserRatingDataDemographic DemographicAll { get; set; }

        /// <summary>
        /// Gets or Sets DemographicMales
        /// </summary>
        [DataMember(Name="demographicMales", EmitDefaultValue=false)]
        public UserRatingDataDemographic DemographicMales { get; set; }

        /// <summary>
        /// Gets or Sets DemographicFemales
        /// </summary>
        [DataMember(Name="demographicFemales", EmitDefaultValue=false)]
        public UserRatingDataDemographic DemographicFemales { get; set; }

        /// <summary>
        /// Gets or Sets Top1000Voters
        /// </summary>
        [DataMember(Name="top1000Voters", EmitDefaultValue=false)]
        public UserRatingDataDemographicDetail Top1000Voters { get; set; }

        /// <summary>
        /// Gets or Sets UsUsers
        /// </summary>
        [DataMember(Name="usUsers", EmitDefaultValue=false)]
        public UserRatingDataDemographicDetail UsUsers { get; set; }

        /// <summary>
        /// Gets or Sets NonUSUsers
        /// </summary>
        [DataMember(Name="nonUSUsers", EmitDefaultValue=false)]
        public UserRatingDataDemographicDetail NonUSUsers { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserRatingData {\n");
            sb.Append("  ImDbId: ").Append(ImDbId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  FullTitle: ").Append(FullTitle).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  TotalRating: ").Append(TotalRating).Append("\n");
            sb.Append("  TotalRatingVotes: ").Append(TotalRatingVotes).Append("\n");
            sb.Append("  Ratings: ").Append(Ratings).Append("\n");
            sb.Append("  DemographicAll: ").Append(DemographicAll).Append("\n");
            sb.Append("  DemographicMales: ").Append(DemographicMales).Append("\n");
            sb.Append("  DemographicFemales: ").Append(DemographicFemales).Append("\n");
            sb.Append("  Top1000Voters: ").Append(Top1000Voters).Append("\n");
            sb.Append("  UsUsers: ").Append(UsUsers).Append("\n");
            sb.Append("  NonUSUsers: ").Append(NonUSUsers).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserRatingData);
        }

        /// <summary>
        /// Returns true if UserRatingData instances are equal
        /// </summary>
        /// <param name="input">Instance of UserRatingData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRatingData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ImDbId == input.ImDbId ||
                    (this.ImDbId != null &&
                    this.ImDbId.Equals(input.ImDbId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.FullTitle == input.FullTitle ||
                    (this.FullTitle != null &&
                    this.FullTitle.Equals(input.FullTitle))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.TotalRating == input.TotalRating ||
                    (this.TotalRating != null &&
                    this.TotalRating.Equals(input.TotalRating))
                ) && 
                (
                    this.TotalRatingVotes == input.TotalRatingVotes ||
                    (this.TotalRatingVotes != null &&
                    this.TotalRatingVotes.Equals(input.TotalRatingVotes))
                ) && 
                (
                    this.Ratings == input.Ratings ||
                    this.Ratings != null &&
                    input.Ratings != null &&
                    this.Ratings.SequenceEqual(input.Ratings)
                ) && 
                (
                    this.DemographicAll == input.DemographicAll ||
                    (this.DemographicAll != null &&
                    this.DemographicAll.Equals(input.DemographicAll))
                ) && 
                (
                    this.DemographicMales == input.DemographicMales ||
                    (this.DemographicMales != null &&
                    this.DemographicMales.Equals(input.DemographicMales))
                ) && 
                (
                    this.DemographicFemales == input.DemographicFemales ||
                    (this.DemographicFemales != null &&
                    this.DemographicFemales.Equals(input.DemographicFemales))
                ) && 
                (
                    this.Top1000Voters == input.Top1000Voters ||
                    (this.Top1000Voters != null &&
                    this.Top1000Voters.Equals(input.Top1000Voters))
                ) && 
                (
                    this.UsUsers == input.UsUsers ||
                    (this.UsUsers != null &&
                    this.UsUsers.Equals(input.UsUsers))
                ) && 
                (
                    this.NonUSUsers == input.NonUSUsers ||
                    (this.NonUSUsers != null &&
                    this.NonUSUsers.Equals(input.NonUSUsers))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImDbId != null)
                    hashCode = hashCode * 59 + this.ImDbId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.FullTitle != null)
                    hashCode = hashCode * 59 + this.FullTitle.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.TotalRating != null)
                    hashCode = hashCode * 59 + this.TotalRating.GetHashCode();
                if (this.TotalRatingVotes != null)
                    hashCode = hashCode * 59 + this.TotalRatingVotes.GetHashCode();
                if (this.Ratings != null)
                    hashCode = hashCode * 59 + this.Ratings.GetHashCode();
                if (this.DemographicAll != null)
                    hashCode = hashCode * 59 + this.DemographicAll.GetHashCode();
                if (this.DemographicMales != null)
                    hashCode = hashCode * 59 + this.DemographicMales.GetHashCode();
                if (this.DemographicFemales != null)
                    hashCode = hashCode * 59 + this.DemographicFemales.GetHashCode();
                if (this.Top1000Voters != null)
                    hashCode = hashCode * 59 + this.Top1000Voters.GetHashCode();
                if (this.UsUsers != null)
                    hashCode = hashCode * 59 + this.UsUsers.GetHashCode();
                if (this.NonUSUsers != null)
                    hashCode = hashCode * 59 + this.NonUSUsers.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
