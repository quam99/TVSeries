/* 
 * IMDb-API
 *
 * The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>
 *
 * OpenAPI spec version: 1.8.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BoxOfficeShort
    /// </summary>
    [DataContract]
    public partial class BoxOfficeShort : IEquatable<BoxOfficeShort>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxOfficeShort" /> class.
        /// </summary>
        /// <param name="budget">budget.</param>
        /// <param name="openingWeekendUSA">openingWeekendUSA.</param>
        /// <param name="grossUSA">grossUSA.</param>
        /// <param name="cumulativeWorldwideGross">cumulativeWorldwideGross.</param>
        public BoxOfficeShort(string budget = default(string), string openingWeekendUSA = default(string), string grossUSA = default(string), string cumulativeWorldwideGross = default(string))
        {
            this.Budget = budget;
            this.OpeningWeekendUSA = openingWeekendUSA;
            this.GrossUSA = grossUSA;
            this.CumulativeWorldwideGross = cumulativeWorldwideGross;
        }

        /// <summary>
        /// Gets or Sets Budget
        /// </summary>
        [DataMember(Name = "budget", EmitDefaultValue = false)]
        public string Budget { get; set; }

        /// <summary>
        /// Gets or Sets OpeningWeekendUSA
        /// </summary>
        [DataMember(Name = "openingWeekendUSA", EmitDefaultValue = false)]
        public string OpeningWeekendUSA { get; set; }

        /// <summary>
        /// Gets or Sets GrossUSA
        /// </summary>
        [DataMember(Name = "grossUSA", EmitDefaultValue = false)]
        public string GrossUSA { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeWorldwideGross
        /// </summary>
        [DataMember(Name = "cumulativeWorldwideGross", EmitDefaultValue = false)]
        public string CumulativeWorldwideGross { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoxOfficeShort {\n");
            sb.Append("  Budget: ").Append(Budget).Append("\n");
            sb.Append("  OpeningWeekendUSA: ").Append(OpeningWeekendUSA).Append("\n");
            sb.Append("  GrossUSA: ").Append(GrossUSA).Append("\n");
            sb.Append("  CumulativeWorldwideGross: ").Append(CumulativeWorldwideGross).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoxOfficeShort);
        }

        /// <summary>
        /// Returns true if BoxOfficeShort instances are equal
        /// </summary>
        /// <param name="input">Instance of BoxOfficeShort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoxOfficeShort input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Budget == input.Budget ||
                    (this.Budget != null &&
                    this.Budget.Equals(input.Budget))
                ) &&
                (
                    this.OpeningWeekendUSA == input.OpeningWeekendUSA ||
                    (this.OpeningWeekendUSA != null &&
                    this.OpeningWeekendUSA.Equals(input.OpeningWeekendUSA))
                ) &&
                (
                    this.GrossUSA == input.GrossUSA ||
                    (this.GrossUSA != null &&
                    this.GrossUSA.Equals(input.GrossUSA))
                ) &&
                (
                    this.CumulativeWorldwideGross == input.CumulativeWorldwideGross ||
                    (this.CumulativeWorldwideGross != null &&
                    this.CumulativeWorldwideGross.Equals(input.CumulativeWorldwideGross))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Budget != null)
                    hashCode = hashCode * 59 + this.Budget.GetHashCode();
                if (this.OpeningWeekendUSA != null)
                    hashCode = hashCode * 59 + this.OpeningWeekendUSA.GetHashCode();
                if (this.GrossUSA != null)
                    hashCode = hashCode * 59 + this.GrossUSA.GetHashCode();
                if (this.CumulativeWorldwideGross != null)
                    hashCode = hashCode * 59 + this.CumulativeWorldwideGross.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
