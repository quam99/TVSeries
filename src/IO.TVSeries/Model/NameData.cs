/* 
 * IMDb-API
 *
 * The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>
 *
 * OpenAPI spec version: 1.8.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NameData
    /// </summary>
    [DataContract]
        public partial class NameData :  IEquatable<NameData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NameData" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="role">role.</param>
        /// <param name="image">image.</param>
        /// <param name="summary">summary.</param>
        /// <param name="birthDate">birthDate.</param>
        /// <param name="deathDate">deathDate.</param>
        /// <param name="awards">awards.</param>
        /// <param name="height">height.</param>
        /// <param name="knownFor">knownFor.</param>
        /// <param name="castMovies">castMovies.</param>
        /// <param name="errorMessage">errorMessage.</param>
        public NameData(string id = default(string), string name = default(string), string role = default(string), string image = default(string), string summary = default(string), string birthDate = default(string), string deathDate = default(string), string awards = default(string), string height = default(string), List<KnownFor> knownFor = default(List<KnownFor>), List<CastMovie> castMovies = default(List<CastMovie>), string errorMessage = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Role = role;
            this.Image = image;
            this.Summary = summary;
            this.BirthDate = birthDate;
            this.DeathDate = deathDate;
            this.Awards = awards;
            this.Height = height;
            this.KnownFor = knownFor;
            this.CastMovies = castMovies;
            this.ErrorMessage = errorMessage;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or Sets BirthDate
        /// </summary>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        public string BirthDate { get; set; }

        /// <summary>
        /// Gets or Sets DeathDate
        /// </summary>
        [DataMember(Name="deathDate", EmitDefaultValue=false)]
        public string DeathDate { get; set; }

        /// <summary>
        /// Gets or Sets Awards
        /// </summary>
        [DataMember(Name="awards", EmitDefaultValue=false)]
        public string Awards { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public string Height { get; set; }

        /// <summary>
        /// Gets or Sets KnownFor
        /// </summary>
        [DataMember(Name="knownFor", EmitDefaultValue=false)]
        public List<KnownFor> KnownFor { get; set; }

        /// <summary>
        /// Gets or Sets CastMovies
        /// </summary>
        [DataMember(Name="castMovies", EmitDefaultValue=false)]
        public List<CastMovie> CastMovies { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NameData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  DeathDate: ").Append(DeathDate).Append("\n");
            sb.Append("  Awards: ").Append(Awards).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  KnownFor: ").Append(KnownFor).Append("\n");
            sb.Append("  CastMovies: ").Append(CastMovies).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NameData);
        }

        /// <summary>
        /// Returns true if NameData instances are equal
        /// </summary>
        /// <param name="input">Instance of NameData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NameData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.DeathDate == input.DeathDate ||
                    (this.DeathDate != null &&
                    this.DeathDate.Equals(input.DeathDate))
                ) && 
                (
                    this.Awards == input.Awards ||
                    (this.Awards != null &&
                    this.Awards.Equals(input.Awards))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.KnownFor == input.KnownFor ||
                    this.KnownFor != null &&
                    input.KnownFor != null &&
                    this.KnownFor.SequenceEqual(input.KnownFor)
                ) && 
                (
                    this.CastMovies == input.CastMovies ||
                    this.CastMovies != null &&
                    input.CastMovies != null &&
                    this.CastMovies.SequenceEqual(input.CastMovies)
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.DeathDate != null)
                    hashCode = hashCode * 59 + this.DeathDate.GetHashCode();
                if (this.Awards != null)
                    hashCode = hashCode * 59 + this.Awards.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.KnownFor != null)
                    hashCode = hashCode * 59 + this.KnownFor.GetHashCode();
                if (this.CastMovies != null)
                    hashCode = hashCode * 59 + this.CastMovies.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
